/*

  Script by Chunhui Wang

  Email: chunhui.wang@uni.lu

*/

#include <lib/abbr.dxl>

/***********************  VARIABLE DEFINITION *********************************/
string P_USE_CASE = "Use Case.+"
string P_STEP = "([0-9]+)\\..+"
string P_RFS = "^RFS ([0-9]+|[SBG]AF[0-9]+\\-[0-9]+|[0-9]+\\-[0-9]+)$"
string P_RUCM = "\\[RUCM\\].*"

string P_BasicFlow = "Basic Flow"
string P_SpecificAlternativeFlow = "Specific Alternative Flow"
string P_BoundedAlternativeFlow = "Bounded Alternative Flow"
string P_GlobalAlternativeFlow = "Global Alternative Flow"

/******************** FUNCTION DEFINITION  ************************************/
void setFocusedObject(Object o) {
    int o_no = o.ABS
    Module m = current Module
    gotoObject(o_no, m)
}

bool isRUCMModule(Module m) {
    string des = m.DES
    return matches(P_RUCM, des)
}

bool isTitleObject(Object o) {
    string text = o.TEXT
    return "" == text
}

bool isFlowObject(Object o) {
  if(o == null || !isTitleObject(o))
    return false
  string head = o.HEAD
  return (matches(P_BasicFlow, head) || matches(P_SpecificAlternativeFlow, head) || matches(P_BoundedAlternativeFlow, head) || matches(P_GlobalAlternativeFlow, head))
}

bool isUseCaseObject(Object o) {
  if(o == null || !isTitleObject(o))
    return false
  string head = o.HEAD
  return matches(P_USE_CASE, head)
}

bool hasParent(Object o) {
    return parent o != null
}

string getHeader(Object o) {
    string header = ""
    if(o != null) {
        header = o.HEAD
    }
    return header
}

string getText(Object o) {
    string text = ""
    if(o != null) {
        text = o.TEXT
        return text
    }
    return text
}

Object getFirstMatchInCurrentFlow(string pattern) {
    Object parent = parent current Object
    Object o
    for o in parent do {
        string text = o.TEXT
        if(matches(pattern, text))
            return o
    }
    return null
}

Object getFirstStepInCurrentFlow() {
    return getFirstMatchInCurrentFlow(P_STEP)
}

Object getRFSStepInCurrentFlow() {
    return getFirstMatchInCurrentFlow(P_RFS)
}

int getStepNumber(Object o) {
    string text = o.TEXT
    if(matches(P_STEP, text))
        return intOf text[match 1]
    return 1
}

Object getCurrentUseCaseHeader(Object o) {
    if(o == null)
        return o
    string header = o.HEAD
    if(isTitleObject(o) && matches(P_USE_CASE, header))
        return o
    if(hasParent(o)) {
        if(isTitleObject(o)) {
            o = parent o
            header = o.HEAD
            if(matches(P_USE_CASE, header))
                return o
        }
        if(hasParent(parent o)) {
            o = parent parent o
            header = o.HEAD
            if(matches(P_USE_CASE, header))
            return o
            }
    }
    return null
}

Object getSpecifiedFlow(int sequence, string pattern) {
    Object parent = getCurrentUseCaseHeader(current)
    Object temp_o = first parent
    int counter = 0
    if(matches(pattern, getHeader(temp_o))) {
        counter++
        if(sequence == counter)
            return temp_o
    }
    while((temp_o = next(sibling(temp_o))) != null) {
        if(matches(pattern, getHeader(temp_o))) {
            counter++
            if(sequence == counter)
                return temp_o
        }
    }
}

Object getSpecifiedStepInFlow(int sequence, Object flow) {
    Object o
    int i = 1
    for o in flow do {
        if(matches(P_STEP, getText(o))) {
            if(i == sequence)
                return o
            i++
        }
    }
    return null
}

void goToSpecifiedStep(int flow_no, string flow_pattern, int step_no_start, int step_no_end) {
    Object flow = getSpecifiedFlow(flow_no, flow_pattern)
    Object step_start = getSpecifiedStepInFlow(step_no_start, flow)
    Object step_end = getSpecifiedStepInFlow(step_no_end, flow)
    setFocusedObject(step_start)
    if(step_no_start == step_no_end) {
        setSelection(step_start)
    } else if(step_no_end > step_no_start) {
        setSelection(step_start, step_end)
    } else {
        ack "Invalid Reference Range: End number should bigger than the start number!"
    }
}

void goToSpecifiedStep(int flow_no, string flow_pattern, int step_no) {
    goToSpecifiedStep(flow_no, flow_pattern, step_no, step_no);
}

/******************************************************************************/
// get the sequnce number of current flow. The sequence number indicates the
//position of the current flow among the flows in the same type.
// pattern indicates the type of current flow
// o is the title object of current flow
int getSequenceNumber(string pattern, Object o) {
    Object parent_o = parent o
    Object temp_o
    int i = 1
    for temp_o in parent_o do {
        if(temp_o == o)
            return i
        string heading = temp_o.HEAD
        if(matches(pattern, heading))
            i++
    }
    return -1
}

/******************************************************************************/
// get prefix Type based on the Title Object of the flow
// o - is the title Object of the flow
string getPrefixTypeString(Object o) {
    string heading = o.HEAD
    if(matches(P_BasicFlow,heading)) {
        return ""
    } else if(matches(P_SpecificAlternativeFlow, heading)) {
        int number = getSequenceNumber(P_SpecificAlternativeFlow, o)
        return "SAF" number "-"
    } else if (matches(P_BoundedAlternativeFlow, heading)) {
        int number = getSequenceNumber(P_SpecificAlternativeFlow, o)
        return "BAF" number "-"
    } else if (matches(P_GlobalAlternativeFlow, heading)) {
        int number = getSequenceNumber(P_SpecificAlternativeFlow, o)
        return "GAF" number "-"
    }
    return "-"
}

/******************************************************************************/
// get RFS referce String which refer to the current Object.
// o - is current Object in the flow.
string getRFSRefToCurrentObj(Object o) {
  string text = o.TEXT
  string rfs_prefix
  string rfs_string
  if("" == text || !matches(P_STEP, text))
    ack "Selected Object is not a valid Step."
  else {
    string step_n = text[match 1]
    //Object parents = parent o
    rfs_prefix = getPrefixTypeString(parent o)
    rfs_string = rfs_prefix step_n
  }
  return rfs_string
}


/******************************************************************************/
// get RFS step in the current alternative flow.
// o - is the title Object of the flow.
Object findRfsStepInCurrentFlow(Object parent) {
    Object o
    for o in parent do {
        string text = o.TEXT
        if(matches(P_RFS, text)) {
            return o
        }
    }
    return null
}
/******************************************************************************/
// get RFS step Number in the current alternative flow.
// o - is the title Object of the flow.
string findRfsStepNumberInCurrentFlow(Object parent) {
    Object refObj = findRfsStepInCurrentFlow(parent)
    if(!(null refObj)) {
      string text = refObj.TEXT
      if(matches(P_RFS, text)) {
          return text[match 1]
        }
    }
    return ""
}
