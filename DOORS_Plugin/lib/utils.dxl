/*
  
  Script by Chunhui Wang
  
  Email: chunhui.wang@uni.lu
  
*/

#include <lib/abbr.dxl>

/***********************  VARIABLE DEFINITION *********************************/
string P_USE_CASE = "Use Case.+"
string P_STEP = "([0-9]+)\\..+"
string P_RFS = "^RFS ([0-9]+|[SBG]AF[0-9]+\\-[0-9]+|[0-9]+\\-[0-9]+)$"
string P_RUCM = "RUCM"
    
/******************** FUNCTION DEFINITION  ************************************/
void setFocusedObject(Object o) {
    int o_no = o.ABS
    Module m = current Module
    gotoObject(o_no, m)
}

bool isRUCMModule(Module m) {
    string des = m.DES
    return matches(P_RUCM, des)
}

bool isTitleObject(Object o) {
    string text = o.TEXT
    return "" == text
}

bool hasParent(Object o) {
    return parent o != null
}

string getHeader(Object o) {
    string header = ""
    if(o != null) {
        header = o.HEAD
    }
    return header
}

string getText(Object o) {
    string text = ""
    if(o != null) {
        text = o.TEXT
        return text
    }
    return text
}

Object getFirstMatchInCurrentFlow(string pattern) {
    Object parent = parent current Object
    Object o
    for o in parent do {
        string text = o.TEXT
        if(matches(pattern, text))
            return o
    }
    return null
}

Object getFirstStepInCurrentFlow() {
    return getFirstMatchInCurrentFlow(P_STEP)
}

Object getRFSStepInCurrentFlow() {
    return getFirstMatchInCurrentFlow(P_RFS)
}

int getStepNumber(Object o) {
    string text = o.TEXT
    if(matches(P_STEP, text))
        return intOf text[match 1]
    return 1
}

Object getCurrentUseCaseHeader(Object o) {
    if(o == null)
        return o
    string header = o.HEAD
    if(isTitleObject(o) && matches(P_USE_CASE, header))
        return o
    if(hasParent(o)) {
        if(isTitleObject(o)) {
            o = parent o
            header = o.HEAD
            if(matches(P_USE_CASE, header))
                return o
        }
        if(hasParent(parent o)) {
            o = parent parent o
            header = o.HEAD
            if(matches(P_USE_CASE, header))
            return o
            }
    }
    return null
}

Object getSpecifiedFlow(int sequence, string pattern) {
    Object parent = getCurrentUseCaseHeader(current)
    Object temp_o = first parent
    int counter = 0
    if(matches(pattern, getHeader(temp_o))) {
        counter++
        if(sequence == counter)
            return temp_o
    }
    while((temp_o = next(sibling(temp_o))) != null) {
        if(matches(pattern, getHeader(temp_o))) {
            counter++
            if(sequence == counter)
                return temp_o
        }
    }
}

Object getSpecifiedStepInFlow(int sequence, Object flow) {
    Object o
    int i = 1
    for o in flow do {
        if(matches(P_STEP, getText(o))) {
            if(i == sequence)
                return o
            i++
        }
    }
    return null
}

Object goToSpecifiedStep(int flow_no, string flow_pattern, int step_no) {
    Object flow = getSpecifiedFlow(flow_no, flow_pattern)
    Object step = getSpecifiedStepInFlow(step_no, flow)
    setFocusedObject(step)
}